COMP 3000 Assignment 3
Troy Havelock
100964083
November 26, 2017

=========================================================
ANSWERS:

    1.  The first block in a filesystem is the superblock, which stores much of the information and metadata
        about the filesystem. Luckily there are backup superblocks stored at set intervals in the filesystem.
            
            References: November 16 lecture notes

    2.  There are a few reasons why a filesystem could not be unmounted (assuming the requesting user has
        sufficient privileges). Most importantly, a filesystem cannot be umounted when it is 'busy'. What
        this means is that there are open files on it, a process has its working directory on it, or there is
        a swap file on the filesystem that is in use.

            References: umount man page

**    3.  The standard C library is a userpace API. So it is not defined in kernel space memory. Therefore it
        cannot access the standard C library. It can only access APIs that are already defined inside the 
        kernel

            References: https://en.wikipedia.org/wiki/User_space, November 7 lecture notes

**    4.  The effective user id (euid) of a process is used for permision checks. The uid is not always equal
        to the euid because the uid will be that of the user invoking the process, and the euid will be the
        id of owner of the process.

            References: https://en.wikipedia.org/wiki/User_identifier, https://unix.stackexchange.com/questions/391265/can-bash-run-with-uid-0-and-different-euid

    5.  No we are not creating a new process when we load a kernel module. As with program there is something
        that must run at the beginning, but with kernel modules the part that runs when it is loaded simply
        sets up handlers and "interrupts" that will execute code under certain conditions or when called
        upon.

            References: November 21 lecture notes

    6.

    7.  newgetpid.c is a kernel module which, when loaded, exists in kernel space. put_user() has the ability 
        to write a simple value into user space. This is how the kernel module is able to write to buf.

            References: http://elixir.free-electrons.com/linux/v4.4.83/source/arch/x86/include/asm/uaccess.h#L257

    8.  Since a filesystems physical size is allocated in blocks (ex. ext4 filesystems have 4K blocks), a
        filesystem can have a smaller logical size than its physical size if the data stored in the
        filesystem does not exactly equal an x number of blocks. I'm sure there is more than one case where
        the logical size is greater than the physical size, but one case that I can think of is where
        the filesystem contains a file with many hard links to it. Since the file would have multiple hard
        links, the inode number would be the same, so the physical size would stay the same, while the logical
        size would be much larger.

            References: November 7 lecture notes

    9.  
